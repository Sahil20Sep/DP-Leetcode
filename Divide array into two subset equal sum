class Solution {
public:
    
    bool func(int i, int target, vector<int> &nums, vector<vector<int>> &dp){
        if(target == 0){
            return true;
        }
        if(i < 0){
            return false;
        }
        if(dp[i][target] != -1){
            return dp[i][target];
        }
        bool flag = false;
        flag |= func(i - 1, target, nums, dp);
        if(target - nums[i] >= 0){
            flag |= func(i - 1, target - nums[i], nums, dp);
        }
        return dp[i][target] = flag;
    }

    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int total = accumulate(nums.begin(), nums.end(), 0);
        if(total & 1){
            return false;
        }
        vector<vector<int>> dp(n, vector<int> ((total >> 1) + 1, -1));
        return func(n - 1, (total >> 1), nums, dp);
    }   
};

---------------------------------------------------------------------------------------------------------

bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int total = accumulate(nums.begin(), nums.end(), 0);
        if(total & 1){
            return false;
        }
        vector<vector<int>> dp(n, vector<int> (total + 1, 0));
        for(int i = 0; i < n; i++){
            dp[i][0] = true;
        }
        dp[0][nums[0]] = true;
        for(int i = 1; i < n; i++){
            for(int target = 1; target <= (total >> 1); target++){
                bool flag = false;
                flag |= dp[i - 1][target];
                if(target - nums[i] >= 0){
                    flag |= dp[i - 1][target - nums[i]];
                }
                dp[i][target] = flag;
            }
        }
        return dp[n - 1][(total >> 1)];
    }
    
    ------------------------------------------------------------------------------------------------------
    
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int total = accumulate(nums.begin(), nums.end(), 0);
        if(total & 1){
            return false;
        }
        vector<bool> prev(total + 1, false), temp(total + 1, false);
        prev[0] = true; temp[0] = true;
        prev[nums[0]] = true;
        for(int i = 1; i < n; i++){
            for(int target = 1; target <= (total >> 1); target++){
                bool flag = false;
                flag |= prev[target];
                if(target - nums[i] >= 0){
                    flag |= prev[target - nums[i]];
                }
                temp[target] = flag;
            }
            prev = temp;
        }
        return prev[(total >> 1)];
    }
