class Solution {
public:

    
    double func(double i, double j, double mx, double n, vector<vector<vector<double>>> &dp, vector<pair<double, double>> &movement){
        if(i < 0 || i >= n || j < 0 || j >= n){
            return 0.0;
        }
        if(mx == 0){
            return 1.0;
        }
        if(dp[i][j][mx] != -1){
            return dp[i][j][mx];
        }
        double ans = 0;
        for(auto k : movement){
            ans += func(i + k.first, j + k.second, mx - 1, n, dp, movement);
        }
        return dp[i][j][mx] = ans / 8.0;
    }

    double knightProbability(int n, int mx, int r, int c) {
        vector<pair<double, double>> movement = {
            {2, -1}, {2, 1},
            {-2, -1}, {-2, 1},
            {1, -2}, {-1, -2},
            {1, 2}, {-1, 2}
        };
        vector<vector<vector<double>>> dp(n, vector<vector<double>> (n, vector<double> (mx + 1, -1)));
        return func(r, c, mx, n, dp, movement);
    }
};
