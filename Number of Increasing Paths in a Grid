class Solution {
public:

    const int mod = 1e9 + 7;

    vector<pair<int, int>> movement = {
        {1, 0}, {0, 1}, {0, -1}, {-1, 0}
    };

    int dfs(int i, int j, vector<vector<int>> &dp, vector<vector<int>>& v){

        int n = v.size(), m = v[0].size();
        
        if(dp[i][j] != -1){
            return dp[i][j];
        }

        long long sum = 1;

        for(auto k : movement){
            int xx = i + k.first;
            int yy = j + k.second;
            if(xx >= 0 && xx < n && yy >= 0 && yy < m && v[xx][yy] > v[i][j]){
                sum = (sum + dfs(xx, yy, dp, v)) % mod;
            }
        }

        return dp[i][j] = sum;
    }

    int countPaths(vector<vector<int>>& v) {

        int n = v.size(), m = v[0].size();

        vector<vector<int>> dp(n, vector<int> (m, -1));

        long long ans = 0;

        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                ans = (ans + dfs(i, j, dp, v)) % mod;
            }
        }

        return ans;

    }
};
