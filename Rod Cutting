int func(int i, int have, int price[], vector<vector<int>> &dp){
        if(i < 0){
            return 0;
        }
        if(dp[i][have] != -1){
            return dp[i][have];
        }
        int ans = INT_MIN;
        ans = max(ans, func(i - 1, have, price, dp));
        if(have - (i + 1) >= 0){
            ans = max(ans, func(i, have - (i + 1), price, dp) + price[i]);
        }
        return dp[i][have] = ans;
    }
    
    int cutRod(int price[], int n) {
        vector<vector<int>> dp(n, vector<int> (n + 1, -1));
        return func(n - 1, n, price, dp);
    }
    
------------------------------------------------------------------------------------------------

int cutRod(int price[], int n) {
        vector<vector<int>> dp(n, vector<int> (n + 1, 0));
        // return func(n - 1, n, price, dp);
        for(int i = 0; i < n; i++){
            dp[i][0] = 0;
        }
        for(int i = 0; i <= n; i++){
            dp[0][i] = i * price[0]; 
        }
        for(int i = 1; i < n; i++){
            for(int have = 1; have <= n; have++){
                int ans = INT_MIN;
                ans = max(ans, dp[i - 1][have]);
                if(have - (i + 1) >= 0){
                    ans = max(ans, dp[i][have - (i + 1)] + price[i]); 
                }
                dp[i][have] = ans;
            }
        }
        return dp[n - 1][n];
    }
    
---------------------------------------------------------------------------------------------

int cutRod(int price[], int n) {
        vector<int> prev(n + 1, 0), temp(n + 1, 0);
        // return func(n - 1, n, price, dp);
        prev[0] = 0;
        for(int i = 0; i <= n; i++){
            prev[i] = i * price[0]; 
        }
        for(int i = 1; i < n; i++){
            for(int have = 1; have <= n; have++){
                int ans = INT_MIN;
                ans = max(ans, prev[have]);
                if(have - (i + 1) >= 0){
                    ans = max(ans, temp[have - (i + 1)] + price[i]); 
                }
                temp[have] = ans;
            }
            prev = temp;
        }
        return prev[n];
    }
    
 ----------------------------------------------------------------------------------------------
 
 int cutRod(int price[], int n) {
        vector<int> prev(n + 1, 0);
        // return func(n - 1, n, price, dp);
        prev[0] = 0;
        for(int i = 0; i <= n; i++){
            prev[i] = i * price[0]; 
        }
        for(int i = 1; i < n; i++){
            for(int have = 1; have <= n; have++){
                int ans = INT_MIN;
                ans = max(ans, prev[have]);
                if(have - (i + 1) >= 0){
                    ans = max(ans, prev[have - (i + 1)] + price[i]); 
                }
                prev[have] = ans;
            }
        }
        return prev[n];
    }
