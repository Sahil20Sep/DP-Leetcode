class Solution {
public:

    int func(int i, vector<int> &v, vector<int> &dp){
        if(i == 1 || i == 0){
            return v[i];
        }
        if(dp[i] != -1){
            return dp[i];
        }
        int ans = INT_MAX;
        if(i - 1 >= 0){
            ans = min(ans, func(i - 1, v, dp) + v[i]);
        }
        if(i - 2 >= 0){
            ans = min(ans, func(i - 2, v, dp) + v[i]);
        }
        return dp[i] = ans;
    }

    int minCostClimbingStairs(vector<int>& v) {
        v.push_back(0);
        int n = v.size();
        vector<int> dp(n, -1);
        return func(n - 1, v, dp);
    }
};

------------------------------------------------------------------------------

int minCostClimbingStairs(vector<int>& v) {
        v.push_back(0);
        int n = v.size();
        vector<int> dp(n, 0);
        // return func(n - 1, v, dp);
        dp[0] = v[0], dp[1] = v[1];
        for(int i = 2; i < n; i++){
            int ans = INT_MAX;
            if(i - 1 >= 0){
                ans = min(ans, dp[i - 1] + v[i]);
            }
            if(i - 2 >= 0){
                ans = min(ans, dp[i - 2] + v[i]);
            }
            dp[i] = ans;
        }
        return dp[n - 1];
    }
