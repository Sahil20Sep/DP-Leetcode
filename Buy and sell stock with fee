class Solution {
public:

    int func(int i, int option, vector<int> &v, vector<vector<int>> &dp, int fee){
        if(i == v.size()){
            return 0;
        }
        if(dp[i][option] != -1){
            return dp[i][option];
        }
        int ans = 0;
        if(option == 1){
            ans = max(ans, func(i + 1, 0, v, dp, fee) - v[i]);
            ans = max(ans, func(i + 1, 1, v, dp, fee));
        }else{
            ans = max(ans, func(i + 1, 1, v, dp, fee) + v[i] - fee);
            ans = max(ans, func(i + 1, 0, v, dp, fee));
        }
        return dp[i][option] = ans;
    }

    int maxProfit(vector<int>& v, int fee) {
        int n = v.size();
        vector<vector<int>> dp(n, vector<int> (2, -1));
        return func(0, 1, v, dp, fee);
    }
};

--------------------------------------------------------------------------------------------------

int maxProfit(vector<int>& v, int fee) {
        int n = v.size();
        // return func(0, 1, v, dp);
        int up = 0;
        int down = 0;
        for(int i = n - 1; i >= 0; i--){
            for(int j = 0; j < 2; j++){
                int ans = 0;
                if(j == 0){
                    ans = max(ans, down + v[i] - fee);
                    ans = max(ans, up);
                    up = ans;
                }else{
                    ans = max(ans, up - v[i]);
                    ans = max(ans, down);
                    down = ans;
                }
            }
        }
        return down;
    }
    
    (both side is ok your choise)
