class Solution {
public:

    int func(int i, int j, string &s, string &t, vector<vector<int>> &dp){
        if(i < 0){
            return j + 1;
        }
        if(j < 0){
            return i + 1;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        if(s[i] == t[j]){
            return dp[i][j] = func(i - 1, j - 1, s, t, dp);
        }else{
            return dp[i][j] = 1 + min({func(i - 1, j, s, t, dp), func(i - 1, j - 1, s, t, dp), func(i, j - 1, s, t, dp)});
        }
    }

    int minDistance(string s, string t) {
        int n = s.size(), m = t.size();
        vector<vector<int>> dp(n, vector<int> (m, -1));
        return func(n - 1, m - 1, s, t, dp);
    }
};

--------------------------------------------------------------------------------------------------------------

int minDistance(string s, string t) {
        int n = s.size(), m = t.size();
        vector<vector<int>> dp(n + 1, vector<int> (m + 1, 0));
        // return func(n - 1, m - 1, s, t, dp);
        for(int i = 0; i <= n; i++){
            dp[i][0] = i;
        }
        for(int i = 0; i <= m; i++){
            dp[0][i] = i;
        }
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= m; j++){
                if(s[i - 1] == t[j - 1]){
                    dp[i][j] = dp[i - 1][j - 1];
                }else{
                    dp[i][j] = 1 + min({dp[i - 1][j], dp[i - 1][j - 1], dp[i][j - 1]});
                }
            }
        }
        return dp[n][m];
    }
    
------------------------------------------------------------------------------------------------------------

int minDistance(string s, string t) {
        int n = s.size(), m = t.size();
        vector<int> prev(m + 1, 0), temp(m + 1, 0);
        // return func(n - 1, m - 1, s, t, dp);
        for(int i = 0; i <= m; i++){
            prev[i] = i;
        }
        for(int i = 1; i <= n; i++){
            temp[0] = i; <--- main thing
            for(int j = 1; j <= m; j++){
                if(s[i - 1] == t[j - 1]){
                    temp[j] = prev[j - 1];
                }else{
                    temp[j] = 1 + min({prev[j], prev[j - 1], temp[j - 1]});
                }
            }
            prev = temp;
        }
        return prev[m];
    }
