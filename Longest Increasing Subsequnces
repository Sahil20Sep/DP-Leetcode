class Solution {
public:
    
    int func(int i, int prev, vector<int> &v, vector<vector<int>> &dp){
        if(i == v.size()){
            return 0;
        }
        if(dp[i][prev + 1] != -1){
            return dp[i][prev + 1];
        }
        int ans = INT_MIN;
        ans = max(ans, func(i + 1, prev, v, dp));
        if(prev == -1 || v[prev] < v[i]){
            ans = max(ans, func(i + 1, i, v, dp) + 1);
        }
        return dp[i][prev + 1] = ans;
    }

    int lengthOfLIS(vector<int>& v) {
        int n = v.size();
        vector<vector<int>> dp(n, vector<int> (n + 1, -1));
        return func(0, -1, v, dp);
    }
};

----------------------------------------------------------------------------------

int lengthOfLIS(vector<int>& v) {
        int n = v.size();
        vector<vector<int>> dp(n + 1, vector<int> (n + 1, 0));
        // return func(0, -1, v, dp);
        for(int i = n - 1; i >= 0; i--){
            for(int prev = i - 1; prev >= -1; prev--){
                int ans = INT_MIN;
                ans = max(ans, dp[i + 1][prev + 1]);
                if(prev == -1 || v[prev] < v[i]){
                    ans = max(ans, dp[i + 1][i + 1] + 1);
                }
                dp[i][prev + 1] = ans;
            }
        }
        return dp[0][-1 + 1];
    }
    
-------------------------------------------------------------------------------

int lengthOfLIS(vector<int>& v) {
        int n = v.size();
        vector<int> next(n + 1, 0), temp(n + 1, 0);
        // return func(0, -1, v, dp);
        for(int i = n - 1; i >= 0; i--){
            for(int prev = i - 1; prev >= -1; prev--){
                int ans = INT_MIN;
                ans = max(ans, next[prev + 1]);
                if(prev == -1 || v[prev] < v[i]){
                    ans = max(ans, next[i + 1] + 1);
                }
                temp[prev + 1] = ans;
            }
            next = temp;
        }
        return next[-1 + 1];
    }

---------------------------------------------------------------------------

int lengthOfLIS(vector<int>& v) {
        int n = v.size();
        vector<int> dp(n, 1);
        int ans = 1;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < i; j++){
                if(v[j] < v[i]){
                    dp[i] = max(dp[i], 1 + dp[j]);
                    ans = max(ans, dp[i]);
                }
            }
        }
        return ans;
    }
    
------------------------------------------------------------------------

int lengthOfLIS(vector<int>& v) {
        int n = v.size();
        vector<int> dp(n, 1), hash(n);
        for(int i = 0; i < n; i++){
            hash[i] = i;
        }
        int ans = 1;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < i; j++){
                if(v[j] < v[i]){
                    int temp = dp[i];
                    dp[i] = max(dp[i], 1 + dp[j]);
                    ans = max(ans, dp[i]);
                    if(dp[i] > temp){
                        hash[i] = j;
                    }
                }
            }
        }
        int mx = max_element(dp.begin(), dp.end()) - dp.begin();
        vector<int> fi;
        fi.push_back(v[mx]);
        while(hash[mx] != mx){
            mx = hash[mx];
            fi.push_back(v[mx]);
        }
        reverse(fi.begin(), fi.end());
        for(int i = 0; i < fi.size(); i++){
            cout << fi[i] << ' ';
        }
        cout << endl;
        return ans;
    }
    
    ----------------------------------------------------------------------------------------
    
    int lengthOfLIS(vector<int>& v) {
        int n = v.size();
        vector<int> dp(n, 1), hash(n);
        for(int i = 0; i < n; i++){
            hash[i] = i;
        }
        int ans = 1, store = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < i; j++){
                if(v[j] < v[i]){
                    int temp = dp[i];
                    dp[i] = max(dp[i], 1 + dp[j]);
                    if(dp[i] > temp){
                        hash[i] = j;
                    }
                }
            }
            if(dp[i] > ans){
                ans = dp[i];
                store = i;
            }
        }
        vector<int> fi;
        fi.push_back(v[store]);
        while(hash[store] != store){
            store = hash[store];
            fi.push_back(v[store]);
        }
        reverse(fi.begin(), fi.end());
        for(int i = 0; i < fi.size(); i++){
            cout << fi[i] << ' ';
        }
        cout << endl;
        return ans;
    }
    
 ------------------------------------------------------------------------------
 
 int lengthOfLIS(vector<int>& v) {
        set<int> ms;
        for(int i = 0; i < v.size(); i++){
            if(ms.empty() || *(--ms.end()) < v[i]){
                ms.insert(v[i]);
            }else{
                auto just = ms.lower_bound(v[i]);
                ms.erase(ms.find(*(just)));
                ms.insert(v[i]);
            }
        }
        return (int)ms.size();
    }
