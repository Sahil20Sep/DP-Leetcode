class Solution {
public:
    
    int func(int i, int prev, vector<int> &v, vector<vector<int>> &dp){
        if(i == v.size()){
            return 0;
        }
        if(dp[i][prev + 1] != -1){
            return dp[i][prev + 1];
        }
        int ans = INT_MIN;
        ans = max(ans, func(i + 1, prev, v, dp));
        if(prev == -1 || v[prev] < v[i]){
            ans = max(ans, func(i + 1, i, v, dp) + 1);
        }
        return dp[i][prev + 1] = ans;
    }

    int lengthOfLIS(vector<int>& v) {
        int n = v.size();
        vector<vector<int>> dp(n, vector<int> (n + 1, -1));
        return func(0, -1, v, dp);
    }
};

----------------------------------------------------------------------------------

int lengthOfLIS(vector<int>& v) {
        int n = v.size();
        vector<vector<int>> dp(n + 1, vector<int> (n + 1, 0));
        // return func(0, -1, v, dp);
        for(int i = n - 1; i >= 0; i--){
            for(int prev = i - 1; prev >= -1; prev--){
                int ans = INT_MIN;
                ans = max(ans, dp[i + 1][prev + 1]);
                if(prev == -1 || v[prev] < v[i]){
                    ans = max(ans, dp[i + 1][i + 1] + 1);
                }
                dp[i][prev + 1] = ans;
            }
        }
        return dp[0][-1 + 1];
    }
    
-------------------------------------------------------------------------------

int lengthOfLIS(vector<int>& v) {
        int n = v.size();
        vector<int> next(n + 1, 0), temp(n + 1, 0);
        // return func(0, -1, v, dp);
        for(int i = n - 1; i >= 0; i--){
            for(int prev = i - 1; prev >= -1; prev--){
                int ans = INT_MIN;
                ans = max(ans, next[prev + 1]);
                if(prev == -1 || v[prev] < v[i]){
                    ans = max(ans, next[i + 1] + 1);
                }
                temp[prev + 1] = ans;
            }
            next = temp;
        }
        return next[-1 + 1];
    }
