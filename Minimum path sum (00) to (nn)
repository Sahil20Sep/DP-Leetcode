class Solution {
public:

    int func(int i, int j, vector<vector<int>> &grid, vector<vector<int>> &dp){
        if(i == 0 && j == 0){
            return grid[0][0];
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        int ans = INT_MAX;
        if(i - 1 >= 0){
            ans = min(ans, func(i - 1, j, grid, dp) + grid[i][j]);
        }
        if(j - 1 >= 0){
            ans = min(ans, func(i, j - 1, grid, dp) + grid[i][j]);
        }
        return dp[i][j] = ans;
    }

    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        vector<vector<int>> dp(n, vector<int> (m, -1));
        return func(n - 1, m - 1, grid, dp);
    }
};

----------------------------------------------------------------------------------------------

int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        vector<vector<int>> dp(n, vector<int> (m, 0));
        dp[0][0] = grid[0][0];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(i == 0 && j == 0){
                    continue;
                }
                int ans = INT_MAX;
                if(i - 1 >= 0){
                    ans = min(ans, dp[i - 1][j] + grid[i][j]);
                }
                if(j - 1 >= 0){
                    ans = min(ans, dp[i][j - 1] + grid[i][j]);
                }
                dp[i][j] = ans;
            }
        }
        return dp[n - 1][m - 1];
    }
    
--------------------------------------------------------------------------------------------

int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        vector<int> prev(m, 1e5);
        prev[0] = 0;
        for(int i = 0; i < n; i++){
            vector<int> temp(m, 1e5);
            for(int j = 0; j < m; j++){
                temp[j] = min(temp[j], prev[j] + grid[i][j]);
                if(j > 0){
                    temp[j] = min(temp[j], temp[j - 1] + grid[i][j]);
                }
            }
            prev = temp;
        }
        return prev[m - 1];
    }
