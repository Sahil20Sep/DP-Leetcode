class Solution {
public:

    bool check(int i, int j, string &s){
        while(i < j){
            if(s[i] != s[j]){
                return false;
            }
            i++; j--;
        }
        return true;
    }

    int func(int i, string &s, vector<int> &dp){
        if(i == s.size()){
            return -1;
        }
        if(dp[i] != -1){
            return dp[i];
        }
        int ans = INT_MAX;
        for(int j = i; j < s.size(); j++){
            if(check(i, j, s)){
                ans = min(ans, 1 + func(j + 1, s, dp));
            }
        }
        return dp[i] = ans;
    }

    int minCut(string s) {
        int n = s.size();
        vector<int> dp(n, -1);
        return func(0, s, dp);
    }
};

------------------------------------------------------------------------------

int minCut(string s) {
        int n = s.size();
        vector<int> dp(n + 1, 0);
        dp[n] = -1;
        // return func(0, s, dp);
        for(int i = n - 1; i >= 0; i--){
            int ans = INT_MAX;
            for(int j = i; j < n; j++){
                if(check(i, j, s)){
                    ans = min(ans, 1 + dp[j + 1]);
                }
            }
            dp[i] = ans;
        }
        return dp[0];
    }
