class Solution {
public:

    int func(int i, int j, vector<vector<int>> &t, vector<vector<int>> &dp, int m){
        if(i == t.size()){
            return 0;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        int ans = INT_MAX;
        if(j - 1 >= 0){
            ans = min(ans, func(i + 1, j - 1, t, dp, m) + t[i][j]);
        }
        ans = min(ans, func(i + 1, j, t, dp, m) + t[i][j]);
        if(j + 1 < m){
            ans = min(ans, func(i + 1, j + 1, t, dp, m) + t[i][j]);
        }
        return dp[i][j] = ans;
    }

    int minFallingPathSum(vector<vector<int>>& t) {
        int n = t.size(), m = t[0].size();
        vector<vector<int>> dp(n, vector<int> (m, -1));
        int ans = INT_MAX;
        for(int i = 0; i < m; i++){
            ans = min(ans, func(0, i, t, dp, m));
        }
        return ans;
    }
};

------------------------------------------------------------------------------------------------

int minFallingPathSum(vector<vector<int>>& t) {
        int n = t.size(), m = t[0].size();
        vector<vector<int>> dp(n, vector<int> (m, 0));
        for(int i = 0; i < m; i++){
            dp[n - 1][i] = t[n - 1][i];
        }
        for(int i = n - 2; i >= 0; i--){
            for(int j = 0; j < m; j++){
                int ans = INT_MAX;
                if(j + 1 < m){
                    ans = min(ans, dp[i + 1][j + 1] + t[i][j]);
                }
                ans = min(ans, dp[i + 1][j] + t[i][j]);
                if(j - 1 >= 0){
                    ans = min(ans, dp[i + 1][j - 1] + t[i][j]);
                }
                dp[i][j] = ans;
            }
        }
        int mn = INT_MAX;
        for(int i = 0; i < m; i++){
            mn = min(mn, dp[0][i]);
        }
        return mn;
    }
    
    ----------------------------------------------------------------------------------------
    
    int minFallingPathSum(vector<vector<int>>& t) {
        int n = t.size(), m = t[0].size();
        vector<int> next(m, 0);
        for(int i = 0; i < m; i++){
            next[i] = t[n - 1][i];
        }
        for(int i = n - 2; i >= 0; i--){
            vector<int> temp(m, 0);
            for(int j = 0; j < m; j++){
                int ans = INT_MAX;
                if(j + 1 < m){
                    ans = min(ans, next[j + 1] + t[i][j]);
                }
                ans = min(ans, next[j] + t[i][j]);
                if(j - 1 >= 0){
                    ans = min(ans, next[j - 1] + t[i][j]);
                }
                temp[j] = ans;
            }
            next = temp;
        }
        int mn = INT_MAX;
        for(int i = 0; i < m; i++){
            mn = min(mn, next[i]);
        }
        return mn;
    }
