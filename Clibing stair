class Solution {
public:

    int func(int step, vector<int> &dp){
        if(step == 0){
            return 1;
        }
        if(step < 0){
            return 0;
        }
        if(dp[step] != -1){
            return dp[step];
        }
        return dp[step] = func(step - 1, dp) + func(step - 2, dp);
    }

    int climbStairs(int n) {
        vector<int> dp(n + 1, -1);
        return func(n, dp);
    }
};

---------------------------------------------------------------------------------

class Solution {
public:

    int climbStairs(int n) {
        vector<int> dp(n + 1, 0);
        dp[0] = 1, dp[1] = 1;
        for(int i = 2; i <= n; i++){
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }
};

---------------------------------------------------------------------------

class Solution {
public:

    int climbStairs(int n) {
        vector<int> dp(n + 1, 0);
        int p2 = 1, p1 = 1;
        for(int i = 2; i <= n; i++){
            int curr = p1 + p2;
            p2 = p1;
            p1 = curr;
        }
        return p1;
    }
};
