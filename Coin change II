int func(int i, int target, vector<int> &coins, vector<vector<int>> &dp){
        if(target == 0){
            return 1;
        }
        if(i < 0){
            return 0;
        }
        if(dp[i][target] != -1){
            return dp[i][target];
        }
        int ans = 0;
        ans += func(i - 1, target, coins, dp);
        if(target - coins[i] >= 0){
            ans += func(i, target - coins[i], coins, dp);
        }
        return dp[i][target] = ans;
    }

    int change(int amount, vector<int> &coins) {
        int n = coins.size();
        vector<vector<int>> dp(n, vector<int> (amount + 1, -1));
        return func(n - 1, amount, coins, dp);
    }
    
 ---------------------------------------------------------------------------------------
 
 int change(int amount, vector<int> &coins) {
        int n = coins.size();
        vector<vector<int>> dp(n, vector<int> (amount + 1, 0));
        // return func(n - 1, amount, coins, dp);
        for(int i = 0; i < n; i++){
            dp[i][0] = 1;
        }
        for(int i = 0; i <= amount; i += coins[0]){
            dp[0][i] = 1;
        }
        for(int i = 1; i < n; i++){
            for(int target = 1; target <= amount; target++){
                int ans = 0;
                ans += dp[i - 1][target];
                if(target - coins[i] >= 0){
                    ans += dp[i][target - coins[i]];
                }
                dp[i][target] = ans;
            }
        }
        return dp[n - 1][amount];
    }
    
 -----------------------------------------------------------------------------------
    
 int change(int amount, vector<int> &coins) {
        int n = coins.size();
        vector<int> prev(amount + 1, 0), temp(amount + 1, 0);
        // return func(n - 1, amount, coins, dp);
        prev[0] = temp[0] = 1;
        for(int i = 0; i <= amount; i += coins[0]){
            prev[i] = 1;
        }
        for(int i = 1; i < n; i++){
            for(int target = 1; target <= amount; target++){
                int ans = 0;
                ans += prev[target];
                if(target - coins[i] >= 0){
                    ans += temp[target - coins[i]];
                }
                temp[target] = ans;
            }
            prev = temp;
        }
        return prev[amount];
    }   
