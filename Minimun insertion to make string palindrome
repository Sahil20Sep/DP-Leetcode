class Solution {
public:

    int func(int i, int j, string &s, string &t, vector<vector<int>> &dp){
        if(i < 0 || j < 0){
            return 0;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        if(s[i] == t[j]){
            return dp[i][j] = 1 + func(i - 1, j - 1, s, t, dp);
        }else{
            return dp[i][j] = max(func(i - 1, j, s, t, dp), func(i, j - 1, s, t, dp));
        }
    }

    int minInsertions(string s) {
        int n = s.size();
        string t = s;
        reverse(t.begin(), t.end());
        vector<vector<int>> dp(n, vector<int> (n, -1));
        return (n - func(n - 1, n - 1, s, t, dp));
    }
};

---------------------------------------------------------------------------------

int minInsertions(string s) {
        int n = s.size();
        string t = s;
        reverse(t.begin(), t.end());
        vector<int> prev(n + 1, 0), temp(n + 1, 0);
        // return (n - func(n - 1, n - 1, s, t, dp)); 
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= n; j++){
                if(s[i - 1] == t[j - 1]){
                    temp[j] = 1 + prev[j - 1];
                }else{
                    temp[j] = max(prev[j], temp[j - 1]);
                }
            }
            prev = temp;
        }
        return (n -prev[n]);
    }
