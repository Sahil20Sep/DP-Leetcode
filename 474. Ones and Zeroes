class Solution {
public:

    int func(int size, int m, int n, vector<string> &s, vector<vector<vector<int>>> &dp, vector<vector<int>> &hash){
        if(size < 0){
            return 0;
        }
        if(dp[size][m][n] != -1){
            return dp[size][m][n];
        }
        int ans = INT_MIN;
        ans = max(ans, func(size - 1, m, n, s, dp, hash));
        if(m - hash[size][0] >= 0 && n - hash[size][1] >= 0){
            ans = max(ans, func(size - 1, m - hash[size][0], n - hash[size][1], s, dp, hash) + 1);
        }
        return dp[size][m][n] = ans;
    }

    int findMaxForm(vector<string>& s, int m, int n) {
        int size = s.size();
        vector<vector<int>> hash(size, vector<int> (2, 0));
        int cnt = 0;
        for(auto i : s){
            for(auto j : i){
                hash[cnt][j - '0']++;
            }
            cnt++;
        }
        vector<vector<vector<int>>> dp(size + 1, vector<vector<int>> (m + 1, vector<int> (n + 1, 0)));
        // return func(size - 1, m, n, s, dp, hash);
        for(int i = 1; i <= size; i++){
            for(int j = 0; j <= m; j++){
                for(int k = 0; k <= n; k++){
                    int ans = INT_MIN;
                    ans = max(ans, dp[i - 1][j][k]);
                    if(j - hash[i - 1][0] >= 0 && k - hash[i - 1][1] >= 0){
                        ans = max(ans, dp[i - 1][j - hash[i - 1][0]][k - hash[i - 1][1]] + 1);
                    }
                    dp[i][j][k] = ans;
                }
            }
        }
        return dp[size][m][n];
    }
};
