class Solution {
public:

    int func(int i, int option, int sell, vector<int> &v, vector<vector<vector<int>>> &dp, int k){
        if(i == v.size()){
            return 0;
        }
        if(dp[i][option][sell] != -1){
            return dp[i][option][sell];
        }
        int ans = 0;
        if(sell < k){
            if(option == 1){
                ans = max(ans, func(i + 1, 0, sell, v, dp, k) - v[i]);
                ans = max(ans, func(i + 1, 1, sell, v, dp, k));
            }else{
                ans = max(ans, func(i + 1, 1, sell + 1, v, dp, k) + v[i]);
                ans = max(ans, func(i + 1, 0, sell, v, dp, k));
            }
        }
        return dp[i][option][sell] = ans;
    }

    int maxProfit(int k, vector<int>& v) {
        int n = v.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>> (2, vector<int> (k + 1, -1)));
        return func(0, 1, 0, v, dp, k);
    }
};
