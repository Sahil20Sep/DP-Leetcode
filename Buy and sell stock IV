class Solution {
public:

    int func(int i, int option, int sell, vector<int> &v, vector<vector<vector<int>>> &dp, int k){
        if(i == v.size()){
            return 0;
        }
        if(dp[i][option][sell] != -1){
            return dp[i][option][sell];
        }
        int ans = 0;
        if(sell < k){
            if(option == 1){
                ans = max(ans, func(i + 1, 0, sell, v, dp, k) - v[i]);
                ans = max(ans, func(i + 1, 1, sell, v, dp, k));
            }else{
                ans = max(ans, func(i + 1, 1, sell + 1, v, dp, k) + v[i]);
                ans = max(ans, func(i + 1, 0, sell, v, dp, k));
            }
        }
        return dp[i][option][sell] = ans;
    }

    int maxProfit(int k, vector<int>& v) {
        int n = v.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>> (2, vector<int> (k + 1, -1)));
        return func(0, 1, 0, v, dp, k);
    }
};

--------------------------------------------------------------------------------------------------------------

class Solution {
public:

    int func(int i, int option, vector<int> &v, vector<vector<int>> &dp, int k){
        if(i == v.size() || option == (2 * k)){
            return 0;
        }
        if(dp[i][option] != -1){
            return dp[i][option];
        }
        int ans = 0;
        // if(option < 4){
            if(option % 2 == 0){
                ans = max(ans, func(i + 1, option + 1, v, dp, k) - v[i]);
                ans = max(ans, func(i + 1, option, v, dp, k));
            }else{
                ans = max(ans, func(i + 1, option + 1, v, dp, k) + v[i]);
                ans = max(ans, func(i + 1, option, v, dp, k));
            }
        // }
        return dp[i][option] = ans;
    }

    int maxProfit(int k, vector<int>& v) {
        int n = v.size();
        vector<vector<int>> dp(n, vector<int> (k * 2, -1));
        return func(0, 0, v, dp, k);
    }
};

--------------------------------------------------------------------------------------------------------

int maxProfit(int k, vector<int>& v) {
        int n = v.size();
        vector<vector<int>> dp(n + 1, vector<int> ((2 * k) + 1, 0));
        // return func(0, 0, v, dp);
        for(int i = n - 1; i >= 0; i--){
            for(int option = 0; option < (2 * k); option++){
                int ans = 0;
                if(option % 2 == 0){
                    ans = max(ans, dp[i + 1][option + 1] - v[i]);
                    ans = max(ans, dp[i + 1][option]);
                }else{
                    ans = max(ans, dp[i + 1][option + 1] + v[i]);
                    ans = max(ans, dp[i + 1][option]);
                }
                dp[i][option] = ans;
            }
        }
        return dp[0][0];
    }
