class Solution {
public:

    int func(int i, int target, vector<int> &v, vector<vector<int>> &dp){
    if(i == 0){
        if(target == 0 && v[0] == 0){
            return 2;
        }else if(target == 0 || target == v[0]){
            return 1;
        }
        return 0;
    }
    if(i < 0){
        return 0;
    }
    if(dp[i][target] != -1){
        return dp[i][target];
    }
    int ans = 0;
    ans = (ans + func(i - 1, target, v, dp));
    if(target - v[i] >= 0){
        ans = (ans + func(i - 1, target - v[i], v, dp));
    }
    return dp[i][target] = ans;
}

    int findTargetSumWays(vector<int>& nums, int target) {
        int n = nums.size();
        int total = accumulate(nums.begin(), nums.end(), 0);
        if(total < target || (total - target) & 1){
            return 0;
        }
        int find = (total - target) >> 1;
        vector<vector<int>> dp(n, vector<int> (find + 1, -1));
        return func(n - 1, find, nums, dp);
    }
};
