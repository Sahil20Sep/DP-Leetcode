#include <bits/stdc++.h> 

bool func(int i, int target, vector<int> &arr, vector<vector<int>> &dp){
    if(target == 0){
        return true;
    }
    if(i < 0){
        return false;
    }
    if(dp[i][target] != -1){
        return dp[i][target];
    }
    bool flag = false;
    flag |= func(i - 1, target, arr, dp);
    if(target - arr[i] >= 0){
        flag |= func(i - 1, target - arr[i], arr, dp);
    }
    return dp[i][target] = flag;
}

bool subsetSumToK(int n, int k, vector<int> &arr) {
    vector<vector<int>> dp(n, vector<int> (k + 1, -1));
    return func(n - 1, k, arr, dp);
}

------------------------------------------------------------------------------------------------

bool subsetSumToK(int n, int k, vector<int> &arr) {
    vector<vector<bool>> dp(n, vector<bool> (k + 1, false));
    for(int i = 0; i < n; i++){
        dp[i][0] = true;
    }
    dp[0][arr[0]] = true;
    for(int i = 1; i < n; i++){
        for(int target = 1; target <= k; target++){
            bool flag = false;
            flag |= dp[i - 1][target];
            if(target - arr[i] >= 0){
                flag |= dp[i - 1][target - arr[i]];
            }
            dp[i][target] = flag;
        }
    }
    return dp[n - 1][k];
}

--------------------------------------------------------------------------------------------

bool subsetSumToK(int n, int k, vector<int> &arr) {
    vector<bool> prev(k + 1, false);
    prev[0] = true;
    prev[arr[0]] = true;
    for(int i = 1; i < n; i++){
        vector<bool> temp(k + 1, false);
        temp[0] = true;
        for(int target = 1; target <= k; target++){
            bool flag = false;
            flag |= prev[target];
            if(target - arr[i] >= 0){
                flag |= prev[target - arr[i]];
            }
            temp[target] = flag;
        }
        prev = temp;
    }
    return prev[k];
}
