int func(int i, int arr[], vector<int> &dp){
        if(i < 0){
            return 0;
        }
        if(dp[i] != -1){
            return dp[i];
        }
        int ans = func(i - 1, arr, dp);
        ans = max(ans, func(i - 2, arr, dp) + arr[i]);
        return dp[i] = ans;
    }
    
    int FindMaxSum(int arr[], int n)
    {
        vector<int> dp(n, -1);
        return func(n - 1, arr, dp);
    }
    
 ------------------------------------------------------------------------------
 
 vector<int> dp(n, 0);
        // return func(n - 1, arr, dp);
        dp[0] = arr[0], dp[1] = max(arr[0], arr[1]);
        for(int i = 2; i < n; i++){
            int curr = INT_MIN;
            curr = max(curr, dp[i - 1]);
            curr = max(curr, dp[i - 2] + arr[i]);
            dp[i] = curr;
        }
        return dp[n - 1];
        
   --------------------------------------------------------------------------------
   
   int FindMaxSum(int arr[], int n)
    {
        if(n == 1){
            return arr[0];
        }
        int p2 = arr[0], p1 = max(arr[0], arr[1]);
        for(int i = 2; i < n; i++){
            int curr = INT_MIN;
            curr = max(curr, p1);
            curr = max(curr, p2 + arr[i]);
            p2 = p1;
            p1 = curr;
        }
        return p1;
    }
