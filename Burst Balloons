class Solution {
public:

    int func(int i, int j, vector<int> &v, vector<vector<int>> &dp){
        if(i > j){
            return 0;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        int ans = INT_MIN;
        for(int k = i; k <= j; k++){
            ans = max(ans, (v[i - 1] * v[k] * v[j + 1]) + func(i, k - 1, v, dp) + func(k + 1, j, v, dp));
        }
        return dp[i][j] = ans;
    }

    int maxCoins(vector<int>& v) {
        v.push_back(1);
        v.insert(v.begin(), 1);
        int n = v.size();
        vector<vector<int>> dp(n, vector<int> (n, -1));
        return func(1, n - 2, v, dp);
    }
};

----------------------------------------------------------------------------------------------

int maxCoins(vector<int>& v) {
        v.push_back(1);
        v.insert(v.begin(), 1);
        int n = v.size();
        vector<vector<int>> dp(n, vector<int> (n, 0));
        // return func(1, n - 2, v, dp);
        for(int i = n - 2; i >= 1; i--){
            for(int j = i; j <= n - 2; j++){
                int ans = INT_MIN;
                for(int k = i; k <= j; k++){
                    ans = max(ans, (v[i - 1] * v[k] * v[j + 1]) + dp[i][k - 1] + dp[k + 1][j]);
                }
                dp[i][j] = ans;
            }
        }
        return dp[1][n - 2];
    }
