class Solution {
public:

    int func(int i, int option, vector<int> &v, vector<vector<int>> &dp){
        if(i >= v.size()){
            return 0;
        }
        if(dp[i][option] != -1){
            return dp[i][option];
        }
        int ans = 0;
        if(option == 1){
            ans = max(ans, func(i + 1, 0, v, dp) - v[i]);
            ans = max(ans, func(i + 1, 1, v, dp));
        }else{
            ans = max(ans, func(i + 2, 1, v, dp) + v[i]);
            ans = max(ans, func(i + 1, 0, v, dp));
        }
        return dp[i][option] = ans;
    }

    int maxProfit(vector<int>& v) {
        int n = v.size();
        vector<vector<int>> dp(n, vector<int> (2, -1));
        return func(0, 1, v, dp);
    }
};
