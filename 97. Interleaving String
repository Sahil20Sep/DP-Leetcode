class Solution {
public:

    bool func(int i, int j, string &s1, string &s2, string &s3, vector<vector<int>> &dp, int p){
        if(i < 0){
            for(int k = 0; k <= j; k++){
                if(s2[k] != s3[k]){
                    return false;
                }
            }
            return true;
        }
        if(j < 0){
            for(int k = 0; k <= i; k++){
                if(s1[k] != s3[k]){
                    return false;
                }
            }
            return true;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        bool flag = false;
        if(s1[i] == s3[i + j + 1]){
            flag |= func(i - 1, j, s1, s2, s3, dp, p);
        }
        if(s2[j] == s3[i + j + 1]){
            flag |= func(i, j - 1, s1, s2, s3, dp, p);
        }
        return dp[i][j] = flag;
    }

    bool isInterleave(string s1, string s2, string s3) {
        int n = s1.size(), m = s2.size(), p = s3.size();
        if(n + m != p){
            return false;
        }
        vector<vector<int>> dp(n, vector<int> (m, -1));
        return func(n - 1, m - 1, s1, s2, s3, dp, p);
    }
};

-----------------------------------------------------------------------------

bool isInterleave(string s1, string s2, string s3) {
        int n = s1.size(), m = s2.size(), p = s3.size();
        if(n + m != p){
            return false;
        }
        vector<vector<bool>> dp(n + 1, vector<bool> (m + 1, false));
        // return func(n - 1, m - 1, s1, s2, s3, dp, p);
        dp[0][0] = true;
        for(int i = 1; i <= m; i++){
            if(s2[i - 1] == s3[i - 1]){
                dp[0][i] = true;
            }else{
                break;
            }
        }
        for(int i = 1; i <= n; i++){
            if(s1[i - 1] == s3[i - 1]){
                dp[i][0] = true;
            }else{
                break;
            }
        }
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= m; j++){
                bool flag = false;
                if(s1[i - 1] == s3[i + j - 1]){
                    flag |= dp[i - 1][j];
                }
                if(s2[j - 1] == s3[i + j - 1]){
                    flag |= dp[i][j - 1];
                }
                dp[i][j] = flag;
            }
        }
        return dp[n][m];
    }
