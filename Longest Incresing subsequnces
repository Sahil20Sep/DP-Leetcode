class Solution {
public:

    int func(int i, int j, string &s, string &t, vector<vector<int>> &dp){
        if(i < 0 || j < 0){
            return 0;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        if(s[i] == t[j]){
            return dp[i][j] = 1 + func(i - 1, j - 1, s, t, dp);
        }else{
            return dp[i][j] = max(func(i - 1, j, s, t, dp), func(i, j - 1, s, t, dp));
        }
    }

    int longestCommonSubsequence(string s, string t) {
        int n = s.size(), m = t.size();
        vector<vector<int>> dp(n, vector<int> (m, -1));
        return func(n - 1, m - 1, s, t, dp);
    }
};

--------------------------------------------------------------------------------------------------

int longestCommonSubsequence(string s, string t) {
        int n = s.size(), m = t.size();
        vector<vector<int>> dp(n, vector<int> (m, 0));
        // return func(n - 1, m - 1, s, t, dp);
        int cnt = 0;
        for(int i = 0; i < m; i++){
            if(cnt == 1){
                dp[0][i] = 1;
                continue;
            }
            if(s[0] == t[i]){
                cnt++;
                dp[0][i] = 1;
            }else{
                dp[0][i] = 0;
            }
        }
        cnt = 0;
        for(int i = 0; i < n; i++){
            if(cnt == 1){
                dp[i][0] = 1;
                continue;
            }
            if(t[0] == s[i]){
                cnt++;
                dp[i][0] = 1;
            }else{
                dp[i][0] = 0;
            }
        }
        for(int i = 1; i < n; i++){
            for(int j = 1; j < m; j++){
                if(s[i] == t[j]){
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                }else{
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[n - 1][m - 1];
    }
    
 *******************************************************************
    
    int longestCommonSubsequence(string s, string t) {
        int n = s.size(), m = t.size();
        vector<vector<int>> dp(n + 1, vector<int> (m + 1, 0));
        // return func(n - 1, m - 1, s, t, dp);
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= m; j++){
                if(s[i - 1] == t[j - 1]){
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                }else{
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[n][m];
    }
    
 ----------------------------------------------------------------------------------------
 
 int longestCommonSubsequence(string s, string t) {
        int n = s.size(), m = t.size();
        vector<int> prev(m + 1, 0), temp(m + 1, 0);
        // return func(n - 1, m - 1, s, t, dp);
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= m; j++){
                if(s[i - 1] == t[j - 1]){
                    temp[j] = prev[j - 1] + 1;
                }else{
                    temp[j] = max(prev[j], temp[j - 1]);
                }
            }
            prev = temp;
        }
        return prev[m];
    }
