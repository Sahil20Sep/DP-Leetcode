
bool comp(vector<int> &a, vector<int> &b){
    if(a[0] < b[0]){
        return true;
    }
    if(a[0] == b[0]){
        if(a[1] < b[1]){
            return true;
        }
    }
    return false;
}

class Solution {
public:

    int func(int i, int prev, vector<vector<int>> &v, vector<vector<int>> &dp){
        if(i == v.size()){
            return 0;
        }
        if(dp[i][prev + 1] != -1){
            return dp[i][prev + 1];
        }
        int ans = INT_MIN;
        ans = max(ans, func(i + 1, prev, v, dp));
        if(prev == -1 || (v[prev][0] < v[i][0] && v[prev][1] < v[i][1])){
            ans = max(ans, func(i + 1, i, v, dp) + 1);
        }
        return dp[i][prev + 1] = ans;
    }

    int maxEnvelopes(vector<vector<int>>& v) {
        int n = v.size(), m = v[0].size();
        sort(v.begin(), v.end(), comp);
        vector<vector<int>> dp(n, vector<int> (n + 1, -1));
        return func(0, -1, v, dp);
    }
};
