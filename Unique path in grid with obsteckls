class Solution {
public:

    int func(int i, int j, vector<vector<int>> &grid, vector<vector<int>> &dp){
        if(i == 0 && j == 0 && grid[i][j] != 1){
            return 1;
        }
        if(i < 0 || j < 0){
            return 0;
        }
        if(grid[i][j] == 1){
            return 0;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        int ans = 0;
        ans = func(i - 1, j, grid, dp) + func(i, j - 1, grid, dp);
        return dp[i][j] = ans;
    }

    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        vector<vector<int>> dp(grid.size(), vector<int> (grid[0].size(), -1));
        return func(grid.size() - 1, grid[0].size() - 1, grid, dp);
    }
};

----------------------------------------------------------------------------------------------

int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        vector<vector<int>> dp(n, vector<int> (m, 0));
        if(grid[0][0] == 1){
            dp[0][0] = 0;
        }else{
            dp[0][0] = 1;
        }
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(i == 0 && j == 0 || grid[i][j] == 1){
                    continue;
                }
                int ans = 0;
                if(i - 1 >= 0){
                    ans += dp[i - 1][j];
                }
                if(j - 1 >= 0){
                    ans += dp[i][j - 1];
                }
                dp[i][j] = ans;
            }
        }
        return dp[n - 1][m - 1];
    }
    
---------------------------------------------------------------------------------------------

int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        vector<int> prev(m, 0);
        if(grid[0][0] == 1){
            prev[0] = 0;
        }else{
            prev[0] = 1;
        }
        for(int i = 0; i < n; i++){
            vector<int> temp(m, 0);
            for(int j = 0; j < m; j++){
                if(grid[i][j] == 1){
                    continue;
                }
                temp[j] += prev[j];
                if(j > 0){
                    temp[j] += temp[j - 1];
                }
            }
            prev = temp;
        }
        return prev[m - 1];
    }
