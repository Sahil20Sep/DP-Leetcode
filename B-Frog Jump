int func(int i, int k, vector<int> &v, vector<int> &dp){
    if(i == 0){
        return 0;
    }
    if(dp[i] != -1){
        return dp[i];
    }
    int ans = INT_MAX;
    for(int j = 1; j <= k; j++){
        if((i - j) >= 0){
            ans = min(ans, func(i - j, k, v, dp) + abs(v[i] - v[i - j]));
        }
    }
    return dp[i] = ans;
}

------------------------------------------------------------------------------

int n, k; cin >> n >> k;
vector<int> v(n); inarr(0, n, v);
vector<int> dp(n, 0);
// cout << func(n - 1, k, v, dp) << endl;
dp[0] = 0;
for(int i = 1; i < n; i++){
    int ans = INT_MAX;
    for(int j = 1; j <= k && (i - j) >= 0; j++){
        ans = min(ans, dp[i - j] + abs(v[i] - v[i - j]));
    }
    dp[i] = ans;
}
cout << dp[n - 1] << endl;

----------------------------------------------------------------------------

No need to space optimize maximum we can is O(K).
