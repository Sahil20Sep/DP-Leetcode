
bool func(int i, int target, vector<int> &nums, vector<vector<int>> &dp){
        if(target == 0){
            return true;
        }
        if(i < 0){
            return false;
        }
        if(dp[i][target] != -1){
            return dp[i][target];
        }
        bool flag = false;
        flag |= func(i - 1, target, nums, dp);
        if(target - nums[i] >= 0){
            flag |= func(i - 1, target - nums[i], nums, dp);
        }
        return dp[i][target] = flag;
    }

int Solution::solve(vector<int> &v) {
    int n = v.size();
    if(n == 1){
        return v[0];
    }
    int total = 0;
    for(int i = 0; i < n; i++){
        total += v[i];
    }
    int half = (total >> 1);
    vector<vector<int>> dp(n, vector<int> (total + 1, -1));
    for(int target = half; target >= 1; target--){
        if(func(n - 1, target, v, dp)){
            return abs((total - target) - target);
        }
    }
}

-----------------------------------------------------------------------------------------------

int Solution::solve(vector<int> &v) {
    int n = v.size();
    if(n == 1){
        return v[0];
    }
    int total = 0;
    for(int i = 0; i < n; i++){
        total += v[i];
    }
    int half = (total >> 1);
    vector<vector<bool>> dp(n, vector<bool> (half + 1, 0));
    for(int i = 0; i < n; i++){
        dp[i][0] = true;
    }
    if(v[0] <= half){
        dp[0][v[0]] = true;
    }
    for(int i = 1; i < n; i++){
        for(int target = 1; target <= half; target++){
            bool flag = false;
            flag |= dp[i - 1][target];
            if(target - v[i] >= 0){
                flag |= dp[i - 1][target - v[i]];
            }
            dp[i][target] = flag;
        }
    }
    for(int i = half; i >= 1; i--){
        if(dp[n - 1][i]){
            return total - i - i;
        }
    }
}

-------------------------------------------------------------------------------------------

int Solution::solve(vector<int> &v) {
    int n = v.size();
    if(n == 1){
        return v[0];
    }
    int total = 0;
    for(int i = 0; i < n; i++){
        total += v[i];
    }
    int half = (total >> 1);
    vector<int> prev(half + 1, 0), temp(half + 1, 0);
    prev[0] = temp[0] = true;
    if(v[0] <= half){
        prev[v[0]] = true;
    }
    for(int i = 1; i < n; i++){
        for(int target = 1; target <= half; target++){
            bool flag = false;
            flag |= prev[target];
            if(target - v[i] >= 0){
                flag |= prev[target - v[i]];
            }
            temp[target] = flag;
        }
        prev = temp;
    }
    for(int i = half; i >= 1; i--){
        if(prev[i]){
            return total - i - i;
        }
    }
}
