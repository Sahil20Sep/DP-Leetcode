int LongestBitonicSequence(vector<int> v)
	{
	    int n = v.size();
	    vector<int> dp1(n, 1);
	    vector<int> dp2(n, 1);
	    for(int i = 0; i < n; i++){
	        for(int j = 0; j < i; j++){
	            if(v[j] < v[i] && (1 + dp1[j] > dp1[i])){
	                dp1[i] = 1 + dp1[j];
	            }
	        }
	    }
	    for(int i = n - 1; i >= 0; i--){
	        for(int j = i + 1; j < n; j++){
	            if(v[j] < v[i] && (1 + dp2[j] > dp2[i])){
	                dp2[i] = 1 + dp2[j];
	            }
	        }
	    }
	    int mn = INT_MIN;
	    for(int i = 0; i < n; i++){
	        mn = max(mn, dp1[i] + dp2[i] - 1);
	    }
	    return mn;
	}
	
-----------------------------------------------------------------

int LongestBitonicSequence(vector<int> v)
	{
	    int n = v.size();
	    vector<int> dp1(n, 1);
	    vector<int> dp2(n, 1);
	    for(int i = 0; i < n; i++){
	        for(int j = 0; j < i; j++){
	            if(v[j] < v[i] && (1 + dp1[j] > dp1[i])){
	                dp1[i] = 1 + dp1[j];
	            }
	        }
	    }
	    int mn = 1;
	    for(int i = n - 1; i >= 0; i--){
	        for(int j = n - 1; j > i; j--){
	            if(v[j] < v[i] && (1 + dp2[j] > dp2[i])){
	                dp2[i] = 1 + dp2[j];
	            }
	        }
	        mn = max(mn, dp1[i] + dp2[i] - 1);
	    }
	    return mn;
	}
