#include <bits/stdc++.h> 

int func(int i, int target, vector<int> &v, vector<vector<int>> &dp){
    if(target == 0){
        return 1;
    }
    if(i < 0){
        return 0;
    }
    if(dp[i][target] != -1){
        return dp[i][target];
    }
    int ans = 0;
    ans += func(i - 1, target, v, dp);
    if(target - v[i] >= 0 && v[i] != 0){
        ans += func(i - 1, target - v[i], v, dp);
    }
    return dp[i][target] = ans;
}

int findWays(vector<int> &num, int tar)
{
    int n = num.size();
    vector<vector<int>> dp(n, vector<int> (tar + 1, -1));
    int mul = pow(2, count(num.begin(), num.end(), 0));
    return func(n - 1, tar, num, dp) * mul;
}

------------------------------------------------------------------------------------

int findWays(vector<int> &num, int tar)
{
    int n = num.size();
    vector<vector<int>> dp(n, vector<int> (tar + 1, 0));
    int mul = pow(2, count(num.begin(), num.end(), 0));
    // return func(n - 1, tar, num, dp) * mul;
    for(int i = 0; i < n; i++){
        dp[i][0] = 1;
    }
    if(num[0] <= tar){
        dp[0][num[0]] = 1;
    }
    for(int i = 1; i < n; i++){
        for(int target = 1; target <= tar; target++){
            int ans = 0;
            ans += dp[i - 1][target];
            if(target - num[i] >= 0 && num[i] != 0){
                ans += dp[i - 1][target - num[i]];
            }
            dp[i][target] = ans;
        }
    }
    return (dp[n - 1][tar] * mul);
}

-------------------------------------------------------------------------------------

int findWays(vector<int> &num, int tar)
{
    int n = num.size();
    vector<int> prev(tar + 1, 0), temp(tar + 1, 0);
    int mul = pow(2, count(num.begin(), num.end(), 0));
    // return func(n - 1, tar, num, dp) * mul;
    prev[0] = temp[0] = 1;
    if(num[0] <= tar){
        prev[num[0]] = 1;
    }
    for(int i = 1; i < n; i++){
        for(int target = 1; target <= tar; target++){
            int ans = 0;
            ans += prev[target];
            if(target - num[i] >= 0 && num[i] != 0){
                ans += prev[target - num[i]];
            }
            temp[target] = ans;
        }
        prev = temp;
    }
    return (prev[tar] * mul);
}
